{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "hired-cardiff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from collections import defaultdict\n",
    "res_out = defaultdict(lambda: defaultdict(list))\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "outputs": [],
   "source": [
    "res={}"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "beautiful-aruba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "movielens 20000\n",
      "/data/code_yang/cfbe/movielens/20000\n"
     ]
    }
   ],
   "source": [
    "dataset = \"movielens\" #\"pinterest\" # \"gowalla\", \"yelp2018\", \"movielens\"\n",
    "out_dir = 20000\n",
    "filename = dataset\n",
    "print(filename, out_dir)\n",
    "file_dir = \"/data/code_yang/cfbe/{}/{}\".format(dataset, out_dir)\n",
    "print(file_dir)\n",
    "data = pd.read_csv(os.path.join(file_dir, \"out.log\"), sep = \";\", header = None,\n",
    "                   names = ['model', 'epoch', 'train', 'log',  'hr', 'ndcg','ent','al','ep', 'user_noise','item_noise', 'tt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch\n",
      "train\n",
      "log\n",
      "hr\n",
      "ndcg\n",
      "ent\n",
      "al\n",
      "ep\n",
      "user_noise\n",
      "item_noise\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'float' object has no attribute 'split'",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mAttributeError\u001B[0m                            Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-44-1182c617cb8b>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      3\u001B[0m \u001B[0;32mfor\u001B[0m \u001B[0mcln\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mll\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      4\u001B[0m     \u001B[0mprint\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mcln\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 5\u001B[0;31m     \u001B[0mdata\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mcln\u001B[0m\u001B[0;34m]\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdata\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mcln\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mapply\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;32mlambda\u001B[0m \u001B[0mx\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mx\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msplit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"=\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m-\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      6\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001B[0m in \u001B[0;36mapply\u001B[0;34m(self, func, convert_dtype, args, **kwds)\u001B[0m\n\u001B[1;32m   4210\u001B[0m             \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   4211\u001B[0m                 \u001B[0mvalues\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mastype\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mobject\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_values\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 4212\u001B[0;31m                 \u001B[0mmapped\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mlib\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmap_infer\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mf\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mconvert\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mconvert_dtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   4213\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   4214\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mlen\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mmapped\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0misinstance\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mmapped\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;36m0\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mSeries\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32mpandas/_libs/lib.pyx\u001B[0m in \u001B[0;36mpandas._libs.lib.map_infer\u001B[0;34m()\u001B[0m\n",
      "\u001B[0;32m<ipython-input-44-1182c617cb8b>\u001B[0m in \u001B[0;36m<lambda>\u001B[0;34m(x)\u001B[0m\n\u001B[1;32m      3\u001B[0m \u001B[0;32mfor\u001B[0m \u001B[0mcln\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mll\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      4\u001B[0m     \u001B[0mprint\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mcln\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 5\u001B[0;31m     \u001B[0mdata\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mcln\u001B[0m\u001B[0;34m]\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdata\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mcln\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mapply\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;32mlambda\u001B[0m \u001B[0mx\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mx\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msplit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"=\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m-\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      6\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mAttributeError\u001B[0m: 'float' object has no attribute 'split'"
     ]
    }
   ],
   "source": [
    "data['model'] = data['model'].apply(lambda x: x.split(\"model = topk_\")[-1])\n",
    "ll =['epoch', 'train', 'log',  'hr', 'ndcg','ent','al','ep', 'user_noise','item_noise']\n",
    "for cln in ll:\n",
    "    print(cln)\n",
    "    data[cln] = data[cln].apply(lambda x: x.split(\"=\")[-1])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "temporal-picture",
   "metadata": {},
   "outputs": [],
   "source": [
    "ii = np.argmax(data['hr'].values)\n",
    "res[dataset]=data.iloc[ii,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "outputs": [],
   "source": [
    "res['yelp2018']['al']  = res['yelp2018']['al'].split('=')[-1]\n",
    "res['yelp2018']['ep']  = res['yelp2018']['ep'].split('=')[-1]\n",
    "res['yelp2018']['user_noise']  = res['yelp2018']['user_noise'].split('=')[-1]\n",
    "res['yelp2018']['item_noise']  = res['yelp2018']['item_noise'].split('=')[-1]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "res['movielens']['item_noise']  = res['movielens']['item_noise'].split('=')[-1]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "outputs": [
    {
     "data": {
      "text/plain": "{'gowalla': model         10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n epoch                                                        10\n train                                                  0.058668\n log                                                    0.547814\n hr                                                     0.951571\n ndcg                                                   0.808118\n ent                                                      0.1371\n al                                                       0.0883\n ep                                                       0.0489\n user_noise                                               0.4530\n item_noise                                               0.2407\n tt                                                          NaN\n Name: 32, dtype: object,\n 'pinterest': model         10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n epoch                                                        12\n train                                                  0.046285\n log                                                    0.706681\n hr                                                     0.887963\n ndcg                                                   0.577197\n ent                                                      0.0765\n al                                                       0.0675\n ep                                                       0.0090\n user_noise                                               0.3282\n item_noise                                               0.0005\n tt                                                          NaN\n Name: 13, dtype: object,\n 'yelp2018': model         10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n epoch                                                         7\n train                                                  0.077429\n log                                                    0.828347\n hr                                                     0.936782\n ndcg                                                   0.720339\n ent                                                      0.0989\n al                                                       0.0772\n ep                                                       0.0217\n user_noise                                               0.4135\n item_noise                                               0.1510\n tt                                                          NaN\n Name: 24, dtype: object,\n 'movielens': model         10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n epoch                                                        12\n train                                                  0.095680\n log                                                    2.831345\n hr                                                     0.725331\n ndcg                                                   0.446139\n ent                                                      0.0419\n al                                                       0.0410\n ep                                                       0.0009\n user_noise                                               0.1358\n item_noise                                               0.0014\n tt                                                          NaN\n Name: 35, dtype: object}"
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "df={}\n",
    "df=pd.DataFrame(columns=['dataset', 'al', 'ep', 'user_noise', 'item_noise'])\n",
    "for i, k in enumerate(res.keys()):\n",
    "    print(i)\n",
    "    df.loc[i,'dataset'] =k\n",
    "    df['al'].iloc[i]=float(res[k]['al'])\n",
    "    df['ep'].iloc[i]=float(res[k]['ep'])\n",
    "    df['user_noise'].iloc[i]=float(res[k]['user_noise'])\n",
    "    df['item_noise'].iloc[i]=float(res[k]['item_noise'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_width = 0.3  # 条形宽度\n",
    "index_male = np.arange(len(df['al'].values))  # 男生条形图的横坐标\n",
    "index_female = index_male + bar_width  # 女生条形图的横坐标\n",
    "plt.bar(index_male, df['al'].values,  width=bar_width, color='b', label='al')\n",
    "plt.bar(index_female, df['ep'].values,  width=bar_width, color='g', label='ep')\n",
    "plt.legend()\n",
    "plt.xticks(index_male + bar_width/2, df['dataset'].values)  # 让横坐标轴刻度显示 waters 里的饮用水， index_male + bar_width/2 为横坐标轴刻度的位置\n",
    "plt.ylabel('uncertainty')  # 纵坐标轴标题\n",
    "plt.title('data uncertainty vs model uncertainty')  # 图形标题\n",
    "plt.savefig('/data/code_yang/cfbe/pic/uncertainty.eps')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "outputs": [
    {
     "data": {
      "text/plain": "     dataset      al      ep\n0    gowalla  0.0883  0.0489\n1  pinterest  0.0675   0.009\n2   yelp2018  0.0772  0.0217\n3  movielens   0.041  0.0009",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dataset</th>\n      <th>al</th>\n      <th>ep</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>gowalla</td>\n      <td>0.0883</td>\n      <td>0.0489</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>pinterest</td>\n      <td>0.0675</td>\n      <td>0.009</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>yelp2018</td>\n      <td>0.0772</td>\n      <td>0.0217</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>movielens</td>\n      <td>0.041</td>\n      <td>0.0009</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(index_male, df['user_noise'].values,  width=bar_width, color='b', label='user_noise')\n",
    "plt.bar(index_female, df['item_noise'].values,  width=bar_width, color='y', label='item_noise')\n",
    "plt.legend()\n",
    "plt.xticks(index_male + bar_width/2, df['dataset'].values)  # 让横坐标轴刻度显示 waters 里的饮用水， index_male + bar_width/2 为横坐标轴刻度的位置\n",
    "plt.ylabel('uncertainty')  # 纵坐标轴标题\n",
    "plt.title('user noise vs item noise')\n",
    "# 图形标题\n",
    "plt.savefig('/data/code_yang/cfbe/pic/noise.eps')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "''' ================     ===================\n",
    "    ========================================'''"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['model', 'epoch', 'train', 'log', 'hr', 'ndcg', 'ent', 'al', 'ep',\n",
      "       'user_noise', 'item_noise', 'tt'],\n",
      "      dtype='object')\n",
      "except!\n",
      "model 0     10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "1     10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "2     10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "3     10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "4     10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "                            ...                        \n",
      "66    10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "67    10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "68    10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "69    10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "70    10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64...\n",
      "Name: model, Length: 71, dtype: object\n",
      "except!\n",
      "epoch 0      0.0\n",
      "1      1.0\n",
      "2      2.0\n",
      "3      0.0\n",
      "4      1.0\n",
      "      ... \n",
      "66    18.0\n",
      "67    19.0\n",
      "68    20.0\n",
      "69    21.0\n",
      "70    22.0\n",
      "Name: epoch, Length: 71, dtype: float64\n",
      "except!\n",
      "train 0    -1.000000\n",
      "1     2.543709\n",
      "2     0.619275\n",
      "3    -1.000000\n",
      "4     2.543968\n",
      "        ...   \n",
      "66    0.083452\n",
      "67    0.082343\n",
      "68    0.081532\n",
      "69    0.080705\n",
      "70    0.079572\n",
      "Name: train, Length: 71, dtype: float64\n",
      "except!\n",
      "log 0     4.165641\n",
      "1     3.793986\n",
      "2     3.618328\n",
      "3     4.165641\n",
      "4     3.793062\n",
      "        ...   \n",
      "66    2.690252\n",
      "67    2.676552\n",
      "68    2.665297\n",
      "69    2.653731\n",
      "70    2.645756\n",
      "Name: log, Length: 71, dtype: float64\n",
      "except!\n",
      "hr 0     0.664238\n",
      "1     0.608278\n",
      "2     0.597682\n",
      "3     0.664238\n",
      "4     0.606291\n",
      "        ...   \n",
      "66    0.718543\n",
      "67    0.716887\n",
      "68    0.714735\n",
      "69    0.712583\n",
      "70    0.712086\n",
      "Name: hr, Length: 71, dtype: float64\n",
      "except!\n",
      "ndcg 0     0.664238\n",
      "1     0.608278\n",
      "2     0.597682\n",
      "3     0.664238\n",
      "4     0.606291\n",
      "        ...   \n",
      "66    0.444360\n",
      "67    0.444699\n",
      "68    0.442979\n",
      "69    0.442219\n",
      "70    0.441807\n",
      "Name: ndcg, Length: 71, dtype: float64\n",
      "except!\n",
      "ent 0     0.409656\n",
      "1     0.381019\n",
      "2     0.364906\n",
      "3     0.409656\n",
      "4     0.380703\n",
      "        ...   \n",
      "66    0.043300\n",
      "67    0.043400\n",
      "68    0.043600\n",
      "69    0.043700\n",
      "70    0.043900\n",
      "Name: ent, Length: 71, dtype: float64\n",
      "except!\n",
      "al 0     0.3322\n",
      "1     0.2123\n",
      "2     0.1043\n",
      "3     0.0000\n",
      "4     0.0000\n",
      "       ...  \n",
      "66    0.0430\n",
      "67    0.0432\n",
      "68    0.0433\n",
      "69    0.0435\n",
      "70    0.0437\n",
      "Name: al, Length: 71, dtype: float64\n",
      "except!\n",
      "ep 0     0.0678\n",
      "1     0.0798\n",
      "2     0.0601\n",
      "3     0.0000\n",
      "4     0.0000\n",
      "       ...  \n",
      "66    0.0003\n",
      "67    0.0003\n",
      "68    0.0002\n",
      "69    0.0002\n",
      "70    0.0002\n",
      "Name: ep, Length: 71, dtype: float64\n",
      "except!\n",
      "user_noise 0     0.2644\n",
      "1     0.1325\n",
      "2     0.0442\n",
      "3     0.0000\n",
      "4     0.0000\n",
      "       ...  \n",
      "66    0.0417\n",
      "67    0.0347\n",
      "68    0.0288\n",
      "69    0.0238\n",
      "70    0.0207\n",
      "Name: user_noise, Length: 71, dtype: float64\n",
      "except!\n",
      "item_noise 0     0.0000\n",
      "1     0.0000\n",
      "2     0.0000\n",
      "3     0.0000\n",
      "4     0.0000\n",
      "       ...  \n",
      "66    0.0006\n",
      "67    0.0006\n",
      "68    0.0005\n",
      "69    0.0005\n",
      "70    0.0005\n",
      "Name: item_noise, Length: 71, dtype: float64\n",
      "except!\n",
      "tt 0    NaN\n",
      "1    NaN\n",
      "2    NaN\n",
      "3    NaN\n",
      "4    NaN\n",
      "      ..\n",
      "66   NaN\n",
      "67   NaN\n",
      "68   NaN\n",
      "69   NaN\n",
      "70   NaN\n",
      "Name: tt, Length: 71, dtype: float64\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'Column not found: recall'",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-86-b96706983a15>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      8\u001B[0m         \u001B[0mprint\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"except!\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      9\u001B[0m         \u001B[0mprint\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mi\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdata\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mi\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;31m#.str.strip().str.split(\"=\").apply(lambda x:x[-1]))\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 10\u001B[0;31m \u001B[0mdd\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdata\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mgroupby\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m\"model\"\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m\"recall\"\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmax\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     11\u001B[0m \u001B[0mdd\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdd\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mdd\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mindex\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mstr\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcontains\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"False_one\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     12\u001B[0m \u001B[0mdd\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/generic.py\u001B[0m in \u001B[0;36m__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   1608\u001B[0m                 \u001B[0mstacklevel\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m2\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1609\u001B[0m             )\n\u001B[0;32m-> 1610\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0msuper\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__getitem__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1611\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1612\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0m_gotitem\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkey\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mndim\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mint\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0msubset\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mNone\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/base.py\u001B[0m in \u001B[0;36m__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m    226\u001B[0m         \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    227\u001B[0m             \u001B[0;32mif\u001B[0m \u001B[0mkey\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mobj\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 228\u001B[0;31m                 \u001B[0;32mraise\u001B[0m \u001B[0mKeyError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34mf\"Column not found: {key}\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    229\u001B[0m             \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_gotitem\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mndim\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    230\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mKeyError\u001B[0m: 'Column not found: recall'"
     ]
    }
   ],
   "source": [
    "print(data.columns)\n",
    "for i in data.columns:\n",
    "    try:\n",
    "        #print(i)\n",
    "        data[i] = data[i].str.strip().str.split(\"=\").apply(lambda x:float(x[-1].strip()) if isinstance(x, list) else 0)\n",
    "        r = data.sort_values([\"model\", \"recall\"], ascending=False).drop_duplicates(subset=[\"model\"], keep=\"first\")\n",
    "    except:\n",
    "        print(\"except!\")\n",
    "        print(i, data[i])#.str.strip().str.split(\"=\").apply(lambda x:x[-1]))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "initial-madonna",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "model\n10_mfbesvd_bpr_weightdecay_0_batch_1024_dim_64_movielens_neg_50_adam_0.001_norm_False_emb_dropout0_dnn_False_one    0.725331\nName: hr, dtype: float64"
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dd = data.groupby([\"model\"])[\"hr\"].max()\n",
    "dd = dd[dd.index.str.contains(\"False_one\")]\n",
    "dd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "legislative-secondary",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recall@10</th>\n",
       "      <th>models</th>\n",
       "      <th>loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>ITEMCF</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>ITEMCF</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>ITEMCF</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.880135</td>\n",
       "      <td>LIGHTGCN</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.882364</td>\n",
       "      <td>LIGHTGCN</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.692228</td>\n",
       "      <td>LIGHTGCN</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.878196</td>\n",
       "      <td>MF</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.880388</td>\n",
       "      <td>MF</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.879265</td>\n",
       "      <td>MF</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.879881</td>\n",
       "      <td>MFBE</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.881566</td>\n",
       "      <td>MFBE</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.880425</td>\n",
       "      <td>MFBE</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.887165</td>\n",
       "      <td>MFBESVD</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.887401</td>\n",
       "      <td>MFBESVD</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.885027</td>\n",
       "      <td>MFBESVD</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.875641</td>\n",
       "      <td>MFG</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.875188</td>\n",
       "      <td>MFG</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.880008</td>\n",
       "      <td>MFG</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.880153</td>\n",
       "      <td>MFMBE</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.882454</td>\n",
       "      <td>MFMBE</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.880624</td>\n",
       "      <td>MFMBE</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.881131</td>\n",
       "      <td>MFSVD</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.877199</td>\n",
       "      <td>MFSVD</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.873847</td>\n",
       "      <td>MFSVD</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.873032</td>\n",
       "      <td>NMF</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.874572</td>\n",
       "      <td>NMF</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.873140</td>\n",
       "      <td>NMF</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>SVD</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>SVD</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>SVD</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    recall@10    models       loss\n",
       "0    0.877145    ITEMCF   Pairwise\n",
       "1    0.877145    ITEMCF   Listwise\n",
       "2    0.877145    ITEMCF  Pointwise\n",
       "3    0.880135  LIGHTGCN   Pairwise\n",
       "4    0.882364  LIGHTGCN   Listwise\n",
       "5    0.692228  LIGHTGCN  Pointwise\n",
       "6    0.878196        MF   Pairwise\n",
       "7    0.880388        MF   Listwise\n",
       "8    0.879265        MF  Pointwise\n",
       "9    0.879881      MFBE   Pairwise\n",
       "10   0.881566      MFBE   Listwise\n",
       "11   0.880425      MFBE  Pointwise\n",
       "12   0.887165   MFBESVD   Pairwise\n",
       "13   0.887401   MFBESVD   Listwise\n",
       "14   0.885027   MFBESVD  Pointwise\n",
       "15   0.875641       MFG   Pairwise\n",
       "16   0.875188       MFG   Listwise\n",
       "17   0.880008       MFG  Pointwise\n",
       "18   0.880153     MFMBE   Pairwise\n",
       "19   0.882454     MFMBE   Listwise\n",
       "20   0.880624     MFMBE  Pointwise\n",
       "21   0.881131     MFSVD   Pairwise\n",
       "22   0.877199     MFSVD   Listwise\n",
       "23   0.873847     MFSVD  Pointwise\n",
       "24   0.873032       NMF   Pairwise\n",
       "25   0.874572       NMF   Listwise\n",
       "26   0.873140       NMF  Pointwise\n",
       "27   0.820103       SVD   Pairwise\n",
       "28   0.820103       SVD   Listwise\n",
       "29   0.820103       SVD  Pointwise"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dd.index = dd.index.map(lambda x: x[3::].split(\"_weightdecay\")[0])\n",
    "dd = dd.reset_index()\n",
    "dd.rename(columns = {\"recall\":\"recall@10\"}, inplace = True) \n",
    "dd['models'] = dd['model'].apply(lambda x: x.split(\"_\")[0])\n",
    "dd['loss'] = dd['model'].apply(lambda x: x.split(\"_\")[1])\n",
    "dd = dd.drop(['model'], axis = 1)\n",
    "dd['models'] = dd['models'].apply(lambda x: \"lightgcn\" if x == \"lightngcn3dropout0\" else x)\n",
    "dd['models'] = dd['models'].apply(lambda x:x.upper())\n",
    "dd['loss']   = dd['loss'].map({'bpr':'Pairwise', 'point':'Pointwise', 'list':'Listwise'})\n",
    "dd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "prostate-fabric",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recall@10</th>\n",
       "      <th>models</th>\n",
       "      <th>loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>ITEMCF</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>ITEMCF</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>ITEMCF</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.880135</td>\n",
       "      <td>LIGHTGCN</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.882364</td>\n",
       "      <td>LIGHTGCN</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.692228</td>\n",
       "      <td>LIGHTGCN</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.878196</td>\n",
       "      <td>MF</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.880388</td>\n",
       "      <td>MF</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.879265</td>\n",
       "      <td>MF</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.879881</td>\n",
       "      <td>MFBE</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.881566</td>\n",
       "      <td>MFBE</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.880425</td>\n",
       "      <td>MFBE</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.887165</td>\n",
       "      <td>MFBESVD</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.887401</td>\n",
       "      <td>MFBESVD</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.885027</td>\n",
       "      <td>MFBESVD</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.875641</td>\n",
       "      <td>MFG</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.875188</td>\n",
       "      <td>MFG</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.880008</td>\n",
       "      <td>MFG</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.880153</td>\n",
       "      <td>MFMBE</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.882454</td>\n",
       "      <td>MFMBE</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.880624</td>\n",
       "      <td>MFMBE</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.881131</td>\n",
       "      <td>MFSVD</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.877199</td>\n",
       "      <td>MFSVD</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.873847</td>\n",
       "      <td>MFSVD</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.873032</td>\n",
       "      <td>NMF</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.874572</td>\n",
       "      <td>NMF</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.873140</td>\n",
       "      <td>NMF</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>SVD</td>\n",
       "      <td>Pairwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>SVD</td>\n",
       "      <td>Listwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>SVD</td>\n",
       "      <td>Pointwise</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    recall@10    models       loss\n",
       "0    0.877145    ITEMCF   Pairwise\n",
       "1    0.877145    ITEMCF   Listwise\n",
       "2    0.877145    ITEMCF  Pointwise\n",
       "3    0.880135  LIGHTGCN   Pairwise\n",
       "4    0.882364  LIGHTGCN   Listwise\n",
       "5    0.692228  LIGHTGCN  Pointwise\n",
       "6    0.878196        MF   Pairwise\n",
       "7    0.880388        MF   Listwise\n",
       "8    0.879265        MF  Pointwise\n",
       "9    0.879881      MFBE   Pairwise\n",
       "10   0.881566      MFBE   Listwise\n",
       "11   0.880425      MFBE  Pointwise\n",
       "12   0.887165   MFBESVD   Pairwise\n",
       "13   0.887401   MFBESVD   Listwise\n",
       "14   0.885027   MFBESVD  Pointwise\n",
       "15   0.875641       MFG   Pairwise\n",
       "16   0.875188       MFG   Listwise\n",
       "17   0.880008       MFG  Pointwise\n",
       "18   0.880153     MFMBE   Pairwise\n",
       "19   0.882454     MFMBE   Listwise\n",
       "20   0.880624     MFMBE  Pointwise\n",
       "21   0.881131     MFSVD   Pairwise\n",
       "22   0.877199     MFSVD   Listwise\n",
       "23   0.873847     MFSVD  Pointwise\n",
       "24   0.873032       NMF   Pairwise\n",
       "25   0.874572       NMF   Listwise\n",
       "26   0.873140       NMF  Pointwise\n",
       "27   0.820103       SVD   Pairwise\n",
       "28   0.820103       SVD   Listwise\n",
       "29   0.820103       SVD  Pointwise"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "verified-courtesy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "models    loss     \n",
       "ITEMCF    Pairwise     0.877145\n",
       "          Listwise     0.877145\n",
       "          Pointwise    0.877145\n",
       "LIGHTGCN  Pairwise     0.880135\n",
       "          Listwise     0.882364\n",
       "          Pointwise    0.692228\n",
       "MF        Pairwise     0.878196\n",
       "          Listwise     0.880388\n",
       "          Pointwise    0.879265\n",
       "MFBE      Pairwise     0.879881\n",
       "          Listwise     0.881566\n",
       "          Pointwise    0.880425\n",
       "MFBESVD   Pairwise     0.887165\n",
       "          Listwise     0.887401\n",
       "          Pointwise    0.885027\n",
       "MFG       Pairwise     0.875641\n",
       "          Listwise     0.875188\n",
       "          Pointwise    0.880008\n",
       "MFMBE     Pairwise     0.880153\n",
       "          Listwise     0.882454\n",
       "          Pointwise    0.880624\n",
       "MFSVD     Pairwise     0.881131\n",
       "          Listwise     0.877199\n",
       "          Pointwise    0.873847\n",
       "NMF       Pairwise     0.873032\n",
       "          Listwise     0.874572\n",
       "          Pointwise    0.873140\n",
       "SVD       Pairwise     0.820103\n",
       "          Listwise     0.820103\n",
       "          Pointwise    0.820103\n",
       "dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ddd = pd.Series([float(x) for x in dd['recall@10'].values], index=[dd['models'], dd['loss']])\n",
    "ddd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "demonstrated-hypothetical",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>loss</th>\n",
       "      <th>Listwise</th>\n",
       "      <th>Pairwise</th>\n",
       "      <th>Pointwise</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>models</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ITEMCF</th>\n",
       "      <td>0.877145</td>\n",
       "      <td>0.877145</td>\n",
       "      <td>0.877145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LIGHTGCN</th>\n",
       "      <td>0.882364</td>\n",
       "      <td>0.880135</td>\n",
       "      <td>0.692228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MF</th>\n",
       "      <td>0.880388</td>\n",
       "      <td>0.878196</td>\n",
       "      <td>0.879265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MFBE</th>\n",
       "      <td>0.881566</td>\n",
       "      <td>0.879881</td>\n",
       "      <td>0.880425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MFBESVD</th>\n",
       "      <td>0.887401</td>\n",
       "      <td>0.887165</td>\n",
       "      <td>0.885027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MFG</th>\n",
       "      <td>0.875188</td>\n",
       "      <td>0.875641</td>\n",
       "      <td>0.880008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MFMBE</th>\n",
       "      <td>0.882454</td>\n",
       "      <td>0.880153</td>\n",
       "      <td>0.880624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MFSVD</th>\n",
       "      <td>0.877199</td>\n",
       "      <td>0.881131</td>\n",
       "      <td>0.873847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NMF</th>\n",
       "      <td>0.874572</td>\n",
       "      <td>0.873032</td>\n",
       "      <td>0.873140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVD</th>\n",
       "      <td>0.820103</td>\n",
       "      <td>0.820103</td>\n",
       "      <td>0.820103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "loss      Listwise  Pairwise  Pointwise\n",
       "models                                 \n",
       "ITEMCF    0.877145  0.877145   0.877145\n",
       "LIGHTGCN  0.882364  0.880135   0.692228\n",
       "MF        0.880388  0.878196   0.879265\n",
       "MFBE      0.881566  0.879881   0.880425\n",
       "MFBESVD   0.887401  0.887165   0.885027\n",
       "MFG       0.875188  0.875641   0.880008\n",
       "MFMBE     0.882454  0.880153   0.880624\n",
       "MFSVD     0.877199  0.881131   0.873847\n",
       "NMF       0.874572  0.873032   0.873140\n",
       "SVD       0.820103  0.820103   0.820103"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ddd.unstack()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "demographic-fashion",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Movielens')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['pdf.fonttype'] = 42\n",
    "#plt.rcParams['figure.figsize'] = (10,6)\n",
    "ddd.unstack().plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "#ax = ddd.unstack(\"models\").plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "plt.ylim(0.665, 0.735)\n",
    "plt.ylabel(\"$recall@10$\", fontsize=14)\n",
    "plt.xlabel(\"Models\", fontsize=14)\n",
    "plt.title(\"Movielens\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "unavailable-protocol",
   "metadata": {},
   "outputs": [],
   "source": [
    "dd['models']= dd['models'].apply(lambda x: \"lightgcn\" if x == \"lightngcn3dropout0\" else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "european-version",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "models\n",
       "itemcf      0.969764\n",
       "lightgcn    0.992634\n",
       "mf          0.989206\n",
       "mfbe        0.988398\n",
       "mfbesvd     0.989980\n",
       "mfg         0.990507\n",
       "mfgn        0.989734\n",
       "mfgnb       0.988169\n",
       "mfgnm       0.988433\n",
       "mfmbe       0.988837\n",
       "mfsvd       0.988204\n",
       "nmf         0.979011\n",
       "svd         0.885279\n",
       "dtype: float64"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import seaborn as sns\n",
    "#dd['level1'] = dd['model'].apply(lambda x:x.split(\"_\")[0])\n",
    "#dd['level2'] = dd['model'].apply(lambda x:x.split(\"_\")[1])\n",
    "ddd = pd.Series([float(x) for x in dd['recall'].values], index=dd['models'])#, dd['loss']])\n",
    "ddd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "ambient-prague",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# book\n",
    "plt.rcParams['pdf.fonttype'] = 42\n",
    "#plt.rcParams['figure.figsize'] = (10,6)\n",
    "ddd.plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "#ax = ddd.unstack(\"models\").plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "plt.ylim(0.961, 0.99553)\n",
    "plt.ylabel(\"$recall@20$\", fontsize=14)\n",
    "plt.xlabel(\"Models\", fontsize=14)\n",
    "plt.plot([-1, 13], [0.9698, 0.9698], '--r')\n",
    "plt.text(3.75,  0.9907,  '0.9900')\n",
    "plt.text(1.75,  0.9897,  '0.9892')\n",
    "plt.text(-0.25, 0.9707,  '0.9698')\n",
    "#plt.legend(['lightgcn','$mf$','$mfg$','$mfgn$','mfsvd','$nmf$'], loc=\"upper left\", fontsize=12)\n",
    "plt.savefig(\"boss_mf_one.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "exotic-firewall",
   "metadata": {},
   "outputs": [],
   "source": [
    "# book\n",
    "plt.rcParams['pdf.fonttype'] = 42\n",
    "#plt.rcParams['figure.figsize'] = (10,6)\n",
    "ddd.plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "#ax = ddd.unstack(\"models\").plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "plt.ylim(0.67, 0.853)\n",
    "plt.ylabel(\"$recall@20$\", fontsize=14)\n",
    "plt.xlabel(\"Models\", fontsize=14)\n",
    "plt.plot([-1, 13], [0.9042, 0.9042], '--r')\n",
    "plt.text(3.75,  0.8395, '0.8384')\n",
    "plt.text(1.75,  0.819,  '0.8173')\n",
    "plt.text(-0.25, 0.722,  '0.7200')\n",
    "#plt.legend(['lightgcn','$mf$','$mfg$','$mfgn$','mfsvd','$nmf$'], loc=\"upper left\", fontsize=12)\n",
    "plt.savefig(\"book_mf_one.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "great-choir",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ddd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-7-be3fcc765c18>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      2\u001B[0m \u001B[0mplt\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mrcParams\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m'pdf.fonttype'\u001B[0m\u001B[0;34m]\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;36m42\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      3\u001B[0m \u001B[0;31m#plt.rcParams['figure.figsize'] = (10,6)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 4\u001B[0;31m \u001B[0mddd\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mplot\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mbar\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mrot\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m360\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mfigsize\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;36m10\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;36m6\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mfontsize\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m15\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      5\u001B[0m \u001B[0;31m#ax = ddd.unstack(\"models\").plot.bar(rot=360, figsize=(10,6), fontsize=15)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      6\u001B[0m \u001B[0mplt\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mylim\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;36m0.718\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;36m0.843\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mNameError\u001B[0m: name 'ddd' is not defined"
     ]
    }
   ],
   "source": [
    "# yelp2018\n",
    "plt.rcParams['pdf.fonttype'] = 42\n",
    "#plt.rcParams['figure.figsize'] = (10,6)\n",
    "ddd.plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "#ax = ddd.unstack(\"models\").plot.bar(rot=360, figsize=(10,6), fontsize=15)\n",
    "plt.ylim(0.718, 0.843)\n",
    "plt.ylabel(\"$recall@20$\", fontsize=14)\n",
    "plt.xlabel(\"Models\", fontsize=14)\n",
    "plt.plot([-1, 13], [0.9042, 0.9042], '--r')\n",
    "plt.text(3.75,  0.838, '0.8383')\n",
    "plt.text(1.75,  0.817, '0.9183')\n",
    "plt.text(-0.25, 0.720, '0.7200')\n",
    "#plt.legend(['lightgcn','$mf$','$mfg$','$mfgn$','mfsvd','$nmf$'], loc=\"upper left\", fontsize=12)\n",
    "#plt.savefig(\"book_mf_one.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "charitable-publication",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}